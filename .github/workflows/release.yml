name: Release

on:
  push:
    tags:
      - 'v*' # セマンティックバージョンのタグ（例：v1.0.0）

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            extension/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json', 'extension/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Extract version from tag
        id: version
        run: |
          # タグからバージョンを抽出（v1.0.0 -> 1.0.0）
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Update version across all files
        run: |
          # バージョン管理スクリプトを使用して全ファイルを更新
          node version.js --set ${{ steps.version.outputs.version }}
          echo "Updated version to ${{ steps.version.outputs.version }} across all files"

      - name: Install dependencies
        run: npm run install:all

      - name: Display version info
        run: |
          echo "Building release version: ${{ steps.version.outputs.version }}"
          echo "Package.json version: $(node -p "require('./package.json').version")"
          echo "Extension package.json version: $(node -p "require('./extension/package.json').version")"
          echo "Manifest.json version: $(node -p "require('./extension/manifest.json').version")"

      - name: Run linting
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Run unit tests
        run: npm run test:unit

      - name: Build extension
        run: npm run build

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          directory: extension/coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Create release ZIP
        run: |
          # 配布用ZIPファイル作成スクリプトを使用
          npm run build:dist
          echo "Distribution ZIP created successfully"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/mercaColle-extension-${{ github.ref_name }}.zip
          generate_release_notes: true
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
